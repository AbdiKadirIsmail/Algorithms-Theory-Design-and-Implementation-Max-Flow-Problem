import java.io.File;
import java.io.FileNotFoundException;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
/**
 *
 * @author Abdi Kadir Ismail W1651915
 */
public class MaxFlow {
    static class Graph {
        //instance variable
        int vertices;
        int graph[][];
        String[] patht;
         //constructor
        public Graph(int vertex, int[][] graph, String[] patht) {
            this.vertices = vertex;
            this.graph = graph;
            this.patht= patht;
        }

        public int findMaxFlow(int source, int sink) {
            //residual graph
            int[][] residualGraph = new int[vertices][vertices];

            //initialize residual graph same as original graph
            for (int i = 0; i <vertices ; i++) {
                for (int j = 0; j <vertices ; j++) {
                   residualGraph[i][j] = graph[i][j];
                }
            }

            //initialize parent [] to store the path Source to destination
            int [] parent = new int[vertices];

            int max_flow = 0; //initialize the max flow

            while(isPathExist_BFS(residualGraph, source, sink, parent)){
                //if here means still path exist from source to destination

                //parent [] will have the path from source to destination
                //find the capacity which can be passed though the path (in parent[])
                 String pathS = "";
                int flow_capacity = Integer.MAX_VALUE;

                int t = sink;
                while(t!=source){
                    int s = parent[t];
                    flow_capacity = Math.min(flow_capacity, residualGraph[s][t]);
                    t = s;
                }
                
                //update the residual graph
                //reduce the capacity on fwd edge by flow_capacity
                //add the capacity on back edge by flow_capacity
                t = sink;
                while(t!=source){
                    int s = parent[t];
                    residualGraph[s][t]-=flow_capacity;
                    residualGraph[t][s]+=flow_capacity;
                    t = s;
                    pathS = " --->> " + patht[t] + pathS;
                }
                pathS = "S" + pathS;            
                System.out.println("The path: \n" + pathS);
                System.out.println("Flow capacity within a path = " + flow_capacity + "\n");

                //add flow_capacity to max value
                max_flow+=flow_capacity;
            }
            return max_flow;
        }

        public boolean isPathExist_BFS(int [][] residualGraph, int src, int dest, int [] parent){
            boolean pathFound = false;

            //create visited array [] to
            //keep track of visited vertices
            boolean [] visited = new boolean[vertices];

            //Create a queue for BFS
            Queue<Integer> queue = new LinkedList<>();

            //insert the source vertex, mark it visited
            queue.add(src);
            parent[src] = -1;
            visited[src] = true;

            while(queue.isEmpty()==false){
                int u = queue.poll();

                //visit all the adjacent vertices
                for (int v = 0; v <vertices ; v++) {
                    //if vertex is not already visited and u-v edge weight >0
                    if(visited[v]==false && residualGraph[u][v]>0) {
                        queue.add(v);
                        parent[v] = u;
                        visited[v] = true;
                    }
                }
            }
            //check if dest is reached during BFS
            pathFound = visited[dest];
            return pathFound;
        }
    }
        
        /*
        public void addEgde(int vertex, int graph) {
            Graph Integer = new Graph(vertex, graph);
             Queue[vertex].addFirst(Integer); //for directed graph
        }

        public void printGraph(){
            for (int i = 0; i <vertices ; i++) {
                LinkedList<Integer> list =  Queue[i];
                for (int j = 0; j <list.size() ; j++) {
                    System.out.println("vertex-" + i + " is connected to " +
                            list.get(j).graph);
                }
                
    }
        }
 *  
 */ // initializing the menu 
    public boolean menu() {
        
        
        boolean exit = false;
            System.out.println("-- Menu -- ");
            System.out.println("Insert A to Select 6 node graph ");
            System.out.println("Insert B to Select 12 node graph");
            System.out.println("Insert C to Select 24 node graph ");
            System.out.println("Insert D to Select 48 node graph ");
            System.out.println("Insert Q to quit");
        //using method switch to create cases in which allows me to use a input a string.
            Scanner scannerChoice = new Scanner(System.in);  //using scanner methods to read the imputted value of the choice and calls the apporpiate switch 
            String choice = scannerChoice.next().toUpperCase();
            switch(choice){
                case "A":
                Stopwatch timer = new Stopwatch();   //starts the timer  
                int vertices1 = 6; // the number of verticies (vertex) in the graph
                String[] patht = {"S", "1", "2", "3", "4", "T"};
                int graph[][] = { 
                //source 0 (0,1,2,3,4,5)
                {0, 16, 13, 0, 0, 0}, 
                //1    
                {0, 0, 10, 12, 0, 0}, 
                //2
                {0, 4, 0, 0, 14, 0}, 
                //3
                {0, 0, 9, 0, 0, 20}, 
                //4
                {0, 0, 0, 7, 0, 4}, 
                //sink 5
                {0, 0, 0, 0, 0, 0} 
        };
        Graph g = new Graph(vertices1, graph, patht);
        int source1 = 0; // set source value
        int sink1 = 5; //set sink value
        int max_flow = g.findMaxFlow(source1,sink1);// max flow
        System.out.println("Maximum flow from source: " + source1 + " to sink: " + sink1 + " is: " + max_flow);
        System.out.println("Elapsed time = " + timer.elapsedTime()); // print timer value upto this point
        
                    
                    break;
                case "B":
                Stopwatch timer2 = new Stopwatch(); 
                int vertices2 = 12;
                String[] patht2 = {"S", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "T"};
                int graph2[][] = { 
                //source 0 (0,1,2,3,4,5,6,7,8,9,10,11)
                {0,2, 4, 0, 0, 0, 0, 0, 13, 0, 0, 0},
                //1
                {0,0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                //2
                {0 ,0, 0, 5, 9, 0, 0, 0, 7, 0, 0, 0},
                //3
                {0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0,},
                //4
                {0, 0, 0, 0, 0, 5, 0, 21, 0, 8, 0, 0},
                //5
                {0, 0, 0, 10, 0, 0, 15, 16, 0, 0, 0, 0}, 
                //6
                {0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 19},
                //7
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9},
                //8
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0},
                //9
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0},
                //10
                {0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 12},
                //sink 11
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
                
        };
        Graph g2 = new Graph(vertices2, graph2, patht2);
        int source2 = 0;
        int sink2 = 11;
        int max_flow2 = g2.findMaxFlow(source2,sink2);
        System.out.println("Maximum flow from source: " + source2 + " to sink: " + sink2 + " is: " + max_flow2);
        System.out.println("Elapsed time = " + timer2.elapsedTime());
                    break;
                case "C":
                    Stopwatch timer3 = new Stopwatch(); 
                int vertices3 = 24;
                String[] patht3 = {"S", "1", "2", "3", "4", "5", "6", "7", "8", "9","10", 
                    "11", "12", "13", "14","15","16","17","18","19","20","21","22", "T"};
                int graph3[][] = { 
     //source 0 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23)
                {0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0},
                //1
                {0, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //2
                {0, 0, 5, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //3
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //4
                {0, 0, 0, 0, 0, 16, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //5
                {0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 
                //6
                {0, 0, 0, 0, 0, 0, 0, 20, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //7
                {0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //8
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //9
                {0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //10
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21},
                //11
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //12
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0},
                //13
                {0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                //14
                {0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0},
                //15
                {0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0},
                //16
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0},
                //17
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22},
                //18
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0},
                //19
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0},
                //20
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 17, 0, 0},
                //21
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0},
                //22
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 1, 0, 0, 0, 0, 0, 3},
                //sink 23
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
                
        };
        Graph g3 = new Graph(vertices3, graph3, patht3);
        int source3 = 0;
        int sink3 = 23;
        int max_flow3 = g3.findMaxFlow(source3,sink3);
        System.out.println("Maximum flow from source: " + source3 + " to sink: " + sink3 + " is: " + max_flow3);
        System.out.println("Elapsed time = " + timer3.elapsedTime());
                    break;
                case "D":
                    Stopwatch timer4 = new Stopwatch(); 
                int vertices4 = 48;
                String[] patht4 = {"S", "1", "2", "3", "4", "5", "6", "7", "8", "9","10", 
                    "11", "12", "13", "14","15","16","17","18","19","20","21","22","20","21",
                    "22","23","24","25","26","27","28","29", "30","31","32","33","34",
                    "35","36","37","38","39","40","41","42","43","44","45","46","47","T"};
                int graph4[][] = { 
     //source 0 (0, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47)
                {0/*0*/, 2/*1*/, 4/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 39/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 3/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/,0/*45*/, 
                 0/*46*/, 0/*47*/}, 
                //1
                {0/*0*/, 0/*1*/, 3/*2*/, 1/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 25/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/,0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //2
                {0/*0*/, 0/*1*/, 0/*2*/, 13/*3*/, 0/*4*/, 0/*5*/, 34/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 23/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //3
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 36/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //4
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 42/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/,0/*45*/, 
                 0/*46*/, 0/*47*/}, 
                //5
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 39/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 5/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/},  
                //6
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 36/*4*/, 0/*5*/, 0/*6*/, 34/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //7
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 1/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 21/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //8
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 46/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 14/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //9
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 25/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 19/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //10
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 44/*8*/,
                 0/*9*/, 0/*10*/, 15/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //11
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 4/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 31/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //12
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 16/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 38/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //13
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 17/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 5/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //14
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 37/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 39/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //15
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 16/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 5/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //16
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 44/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 2/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                
                //17
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 7/*18*/, 0/*19*/, 33/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //18
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 20/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 16/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //19
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 12/*24*/, 0/*25*/, 36/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //20
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 19/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 43/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //21
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 42/*20*/, 0/*21*/, 24/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //22
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 27/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 6/*47*/}, 
                //23
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 14/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 37/*47*/}, 
                //24
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 23/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/},  
                //25
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 11/*38*/, 9/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //26
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 31/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 36/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //27
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 25/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 32/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //28
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 40/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 42/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //29
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 17/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 11/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/},  
                //30
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 42/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 35/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //31
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 43/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //32
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 33/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //33
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 27/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //34
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 2/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/},
                //35
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 34/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //36
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 24/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //37
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 24/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //38
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 20/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //39
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 4/*47*/}, 
                //40
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 6/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 17/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //41
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 20/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 15/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //42
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 33/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 7/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //43
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 42/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 10/*44*/, 0/*45*/,
                 0/*46*/, 0/*47*/}, 
                //44
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 36/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 44/*45*/,
                 0/*46*/, 0/*47*/}, 
                //45
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 33/*21*/, 0/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 16/*46*/, 0/*47*/}, 
                //46
                {0/*0*/, 0/*1*/, 0/*2*/, 0/*3*/, 0/*4*/, 0/*5*/, 0/*6*/, 0/*7*/, 0/*8*/,
                 0/*9*/, 0/*10*/, 0/*11*/, 0/*12*/, 0/*13*/, 0/*14*/, 0/*15*/, 0/*16*/, 0/*17*/, 
                 0/*18*/, 0/*19*/, 0/*20*/, 0/*21*/, 22/*22*/, 0/*23*/, 0/*24*/, 0/*25*/, 0/*26*/, 
                 0/*27*/, 0/*28*/, 0/*29*/, 0/*30*/, 0/*31*/, 0/*32*/, 0/*33*/, 0/*34*/, 0/*35*/, 
                 0/*36*/, 0/*37*/, 0/*38*/, 0/*39*/, 0/*40*/, 0/*41*/, 0/*42*/, 0/*43*/, 0/*44*/, 0/*45*/,
                 0/*46*/, 15/*47*/}, 
                //Sink 47
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
                
        };
        Graph g4 = new Graph(vertices4, graph4, patht4);
        int source4 = 0;
        int sink4 = 47;
        int max_flow4 = g4.findMaxFlow(source4,sink4);
        System.out.println("Maximum flow from source: " + source4 + " to sink: " + sink4 + " is: " + max_flow4);
        System.out.println("Elapsed time = " + timer4.elapsedTime());
                    break;    
                case "Q":
                    exit = true;
                    break;
                    
    }
         return exit;
         
    }
                    
    
    
    //main which initialised the maxflow 
    public static void main(String[] args) {
        MaxFlow sys = new MaxFlow();   
       boolean exit = false;
        
        while (!exit){
            exit = sys.menu();
        }  
        
       /* 
        int graph[][] = {
            {0, 10, 8, 0, 0, 0},
            {0, 0, 5, 5, 0, 0},
            {0, 4, 0, 0, 10, 0},
           {0, 0, 9, 0, 10, 3},
            {0, 0, 0, 6, 0, 14},
            {0, 0, 0, 0, 0, 0}
        };
        System.out.println("Enter the vertices of the graph");
            vertices = scanner.nextInt();
        System.out.println("Enter the graph");
        
        Graph g = new Graph(vertices, graph);
         System.out.println("Enter the source of the graph");
            source = scanner.nextInt();
           System.out.println("Enter the sink of the graph");
            sink = scanner.nextInt();
       
        int max_flow = g.findMaxFlow(source,sink);
        System.out.println("Maximum flow from source: " + source + " to sink: " + sink + " is: " + max_flow);
          System.out.println("Elapsed time = " + timer.elapsedTime());
       /* int vertices = 6;
        Graph g = new Graph(vertices);
            g.addEgde(0, 1, 4);
            g.addEgde(0, 2, 3);
            g.addEgde(1, 3, 2);
            g.addEgde(1, 2, 5);
            g.addEgde(2, 3, 7);
            g.addEgde(3, 4, 2);
            g.addEgde(4, 0, 4);
            g.addEgde(4, 1, 4);
            g.addEgde(4, 5, 6);
            g.printGraph();
    }
    }
        
 

       // ONLY for IDE version, remove otherwise
    	Scanner input = null;
		try {
			input = new Scanner(new File("tiny graph.txt"));
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		// END of IDE version
		//Graph graph = new Graph(vertices);
      
                
    	
    	
        
        // while (!StdIn.isEmpty()) {   <- ENABLE ONLY if reading from console or terminal
    	while (input.hasNextInt()) { // ONLY for IDE version, remove otherwise
             int p = StdIn.readInt(); //<- ENABLE ONLY if reading from console or terminal
    		//int p = input.nextInt(); // ONLY for IDE version, remove otherwise
             int q = StdIn.readInt(); //<- ENABLE ONLY if reading from console or terminal
    		//int q = input.nextInt(); // ONLY for IDE version, remove otherwise
            Scanner Load = new Scanner (System.in);
            //String graph = Load.nextLine();
            System.out.println(q+" "+p);
        
    

            
    */  
        /*
        System.out.println("Enter the vertices of the graph");
            vertices = scanner.nextInt();
        System.out.println("Enter the graph");
        
        Graph g = new Graph(vertices, graph);
         System.out.println("Enter the source of the graph");
            source = scanner.nextInt();
           System.out.println("Enter the sink of the graph");
            sink = scanner.nextInt();
        Stopwatch timer = new Stopwatch();
        int max_flow = g.findMaxFlow(source,sink);
        System.out.println("Maximum flow from source: " + source + " to sink: " + sink + " is: " + max_flow);
          System.out.println("Elapsed time = " + timer.elapsedTime());
   */
    }
}

    
    
        
            
 
           
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    /***
     static final int V = 6;    //Number of vertices in graph 
  
    /* Returns true if there is a path from source 's' to sink 
      't' in residual graph. Also fills parent[] to store the 
      path 
    boolean bfs(int rGraph[][], int s, int t, int parent[]) 
    { 
        // Create a visited array and mark all vertices as not 
        // visited 
        boolean visited[] = new boolean[V]; 
        for(int i=0; i<V; ++i) 
            visited[i]=false; 
  
        // Create a queue, enqueue source vertex and mark 
        // source vertex as visited 
        LinkedList<Integer> queue = new LinkedList<Integer>(); 
        queue.add(s); 
        visited[s] = true; 
        parent[s]=-1; 
  
        // Standard BFS Loop 
        while (queue.size()!=0) 
        { 
            int u = queue.poll(); 
  
            for (int v=0; v<V; v++) 
            { 
                if (visited[v]==false && rGraph[u][v] > 0) 
                { 
                    queue.add(v); 
                    parent[v] = u; 
                    visited[v] = true; 
                } 
            } 
        } 
  
        // If we reached sink in BFS starting from source, then 
        // return true, else false 
        return (visited[t] == true); 
    } 
    // Returns tne maximum flow from s to t in the given graph 
    int fordFulkerson(int graph[][], int s, int t) 
    { 
        int u, v; 
  
        // Create a residual graph and fill the residual graph 
        // with given capacities in the original graph as 
        // residual capacities in residual graph 
  
        // Residual graph where rGraph[i][j] indicates 
        // residual capacity of edge from i to j (if there 
        // is an edge. If rGraph[i][j] is 0, then there is 
        // not) 
        int rGraph[][] = new int[V][V]; 
  
        for (u = 0; u < V; u++) 
            for (v = 0; v < V; v++) 
                rGraph[u][v] = graph[u][v]; 
  
        // This array is filled by BFS and to store path 
        int parent[] = new int[V]; 
  
        int max_flow = 0;  // There is no flow initially 
  
        // Augment the flow while tere is path from source 
        // to sink 
        while (bfs(rGraph, s, t, parent)) 
        { 
            // Find minimum residual capacity of the edhes 
            // along the path filled by BFS. Or we can say 
            // find the maximum flow through the path found. 
            int path_flow = Integer.MAX_VALUE; 
            for (v=t; v!=s; v=parent[v]) 
            { 
                u = parent[v]; 
                path_flow = Math.min(path_flow, rGraph[u][v]); 
            } 
  
            // update residual capacities of the edges and 
            // reverse edges along the path 
            for (v=t; v != s; v=parent[v]) 
            { 
                u = parent[v]; 
                rGraph[u][v] -= path_flow; 
                rGraph[v][u] += path_flow; 
            } 
  
            // Add path flow to overall flow 
            max_flow += path_flow; 
        } 
  
        // Return the overall flow 
        return max_flow; 
    }
    // Driver program to test above functions 
    public static void main (String[] args) throws java.lang.Exception 
    { 
        int sink;
        int source;
        // Let us create a graph shown in the above example 
        int graph[][] = { 
                                    //source 0 (1,2,3,4,5)
                                    {0, 10, 8, 0, 0, 0}, 
                                    //1
                                     {0, 0, 5, 5, 0, 0},
                                     //2
                                     {0, 4, 0, 0, 10, 0}, 
                                     //3
                                     {0, 0, 7, 0, 6, 3}, 
                                     //4
                                     {0, 0, 0, 10, 0, 14}, 
                                     //sink 5
                                     {0, 0, 0, 0, 0, 0} 
                                   }; 
        
        MaxFlow  m = new MaxFlow ();
        *
    
    
   
        Stopwatch timer = new Stopwatch();
        Scanner scanner = new Scanner(System.in);
       // System.out.println("The maximum possible flow is " + 
         //                  m.fordFulkerson(graph, 0, 5)); 
        //Graph g = new Graph(vertices, graph);
         System.out.println("Enter the source of the graph");
        source = scanner.nextInt();
 
        System.out.println("Enter the sink of the graph");
        sink = scanner.nextInt();
        
        
        
        System.out.println("Maximum flow from source:" + source + " to destination: "+ sink + " is: "+  m.fordFulkerson(graph, 0, 5));
        System.out.println("Elapsed time = " + timer.elapsedTime());
    } 

    
    
} 
 
*/
    